# ------------------------------
# Project: spring-boot-employee-crud
# Stack: Spring Boot 3, Spring Security, JWT, JPA (H2), Bean Validation
# Features
#  - Admin-authenticated CRUD for Employee (Create/Read/Update/Delete)
#  - JWT-based authentication with roles (ADMIN, USER)
#  - Validation on DTOs
#  - Global exception handling with helpful error responses
#  - H2 in-memory database (swap to PostgreSQL/MySQL easily)
#  - Sample curl scripts at bottom
# ------------------------------

# ==============================
# pom.xml
# ==============================
<!-- File: pom.xml -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>spring-boot-employee-crud</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>spring-boot-employee-crud</name>
  <description>Employee CRUD with JWT and RBAC</description>

  <properties>
    <java.version>17</java.version>
    <spring.boot.version>3.3.2</spring.boot.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>0.11.5</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>0.11.5</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>0.11.5</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>

# ==============================
# src/main/resources/application.yml
# ==============================
# File: src/main/resources/application.yml
server:
  port: 8080
spring:
  datasource:
    url: jdbc:h2:mem:employeedb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
    driverClassName: org.h2.Driver
    username: sa
    password: ""
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
  h2:
    console:
      enabled: true
      path: /h2
security:
  jwt:
    secret: "replace-with-a-long-random-secret-key"
    expiration-minutes: 120

# ==============================
# src/main/java/com/example/employee/Application.java
# ==============================
// File: src/main/java/com/example/employee/Application.java
package com.example.employee;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
  public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
  }
}

# ==============================
# src/main/java/com/example/employee/user/Role.java
# ==============================
// File: src/main/java/com/example/employee/user/Role.java
package com.example.employee.user;

public enum Role { USER, ADMIN }

# ==============================
# src/main/java/com/example/employee/user/User.java
# ==============================
// File: src/main/java/com/example/employee/user/User.java
package com.example.employee.user;

import jakarta.persistence.*;
import lombok.*;
import java.time.Instant;

@Entity
@Table(name = "users")
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class User {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false, unique = true)
  private String email;

  @Column(nullable = false)
  private String passwordHash;

  @Enumerated(EnumType.STRING)
  @Column(nullable = false)
  private Role role = Role.USER;

  @Column(nullable = false)
  private Instant createdAt = Instant.now();
}

# ==============================
# src/main/java/com/example/employee/user/UserRepository.java
# ==============================
// File: src/main/java/com/example/employee/user/UserRepository.java
package com.example.employee.user;

import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
  Optional<User> findByEmail(String email);
  boolean existsByEmail(String email);
}

# ==============================
# src/main/java/com/example/employee/security/JwtService.java
# ==============================
// File: src/main/java/com/example/employee/security/JwtService.java
package com.example.employee.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.security.Key;
import java.util.Date;
import java.util.Map;

@Service
public class JwtService {
  private final Key key;
  private final long expirationMs;

  public JwtService(
    @Value("${security.jwt.secret}") String secret,
    @Value("${security.jwt.expiration-minutes}") long expirationMinutes
  ) {
    this.key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(java.util.Base64.getEncoder().encodeToString(secret.getBytes())));
    this.expirationMs = expirationMinutes * 60 * 1000;
  }

  public String generateToken(String subject, Map<String, Object> claims) {
    Date now = new Date();
    Date exp = new Date(now.getTime() + expirationMs);
    return Jwts.builder()
      .setClaims(claims)
      .setSubject(subject)
      .setIssuedAt(now)
      .setExpiration(exp)
      .signWith(key, SignatureAlgorithm.HS256)
      .compact();
  }

  public Claims parse(String token) {
    return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
  }
}

# ==============================
# src/main/java/com/example/employee/security/CustomUserDetailsService.java
# ==============================
// File: src/main/java/com/example/employee/security/CustomUserDetailsService.java
package com.example.employee.security;

import com.example.employee.user.User;
import com.example.employee.user.UserRepository;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class CustomUserDetailsService implements UserDetailsService {
  private final UserRepository repo;
  public CustomUserDetailsService(UserRepository repo) { this.repo = repo; }

  @Override
  public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
    User u = repo.findByEmail(email).orElseThrow(() -> new UsernameNotFoundException("User not found"));
    return new org.springframework.security.core.userdetails.User(
      u.getEmail(), u.getPasswordHash(), List.of(new SimpleGrantedAuthority("ROLE_" + u.getRole().name())));
  }
}

# ==============================
# src/main/java/com/example/employee/security/JwtFilter.java
# ==============================
// File: src/main/java/com/example/employee/security/JwtFilter.java
package com.example.employee.security;

import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;

@Component
public class JwtFilter extends OncePerRequestFilter {
  private final JwtService jwtService;
  private final UserDetailsService uds;
  public JwtFilter(JwtService jwtService, UserDetailsService uds) { this.jwtService = jwtService; this.uds = uds; }

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
    throws ServletException, IOException {
    String header = request.getHeader("Authorization");
    if (header == null || !header.startsWith("Bearer ")) { chain.doFilter(request, response); return; }
    String token = header.substring(7);
    try {
      Claims claims = jwtService.parse(token);
      String email = claims.getSubject();
      if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
        UserDetails ud = uds.loadUserByUsername(email);
        var auth = new UsernamePasswordAuthenticationToken(ud, null, ud.getAuthorities());
        auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
        SecurityContextHolder.getContext().setAuthentication(auth);
      }
    } catch (Exception ignored) {}
    chain.doFilter(request, response);
  }
}

# ==============================
# src/main/java/com/example/employee/security/SecurityConfig.java
# ==============================
// File: src/main/java/com/example/employee/security/SecurityConfig.java
package com.example.employee.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableMethodSecurity
public class SecurityConfig {

  @Bean public PasswordEncoder encoder() { return new BCryptPasswordEncoder(); }

  @Bean public AuthenticationManager authenticationManager(UserDetailsService uds, PasswordEncoder enc) {
    var p = new DaoAuthenticationProvider(); p.setUserDetailsService(uds); p.setPasswordEncoder(enc); return new ProviderManager(p);
  }

  @Bean
  public SecurityFilterChain filterChain(HttpSecurity http, JwtFilter jwtFilter) throws Exception {
    http
      .csrf(csrf -> csrf.disable())
      .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
      .authorizeHttpRequests(auth -> auth
        .requestMatchers(HttpMethod.POST, "/api/auth/register", "/api/auth/login").permitAll()
        .requestMatchers("/h2/**").permitAll()
        .anyRequest().authenticated()
      );

    http.headers(h -> h.frameOptions(f -> f.disable())); // H2 console
    http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
    return http.build();
  }
}

# ==============================
# src/main/java/com/example/employee/dto/AuthDtos.java
# ==============================
// File: src/main/java/com/example/employee/dto/AuthDtos.java
package com.example.employee.dto;

import jakarta.validation.constraints.*;
import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor
public class RegisterRequest {
  @Email @NotBlank private String email;
  @NotBlank @Size(min = 8, max = 100) private String password;
}

@Getter @Setter @NoArgsConstructor @AllArgsConstructor
public class LoginRequest {
  @Email @NotBlank private String email;
  @NotBlank private String password;
}

@Getter @Setter @AllArgsConstructor
public class AuthResponse { private String token; }

# ==============================
# src/main/java/com/example/employee/controller/AuthController.java
# ==============================
// File: src/main/java/com/example/employee/controller/AuthController.java
package com.example.employee.controller;

import com.example.employee.dto.*;
import com.example.employee.security.JwtService;
import com.example.employee.user.Role;
import com.example.employee.user.User;
import com.example.employee.user.UserRepository;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
  private final AuthenticationManager authManager;
  private final PasswordEncoder encoder;
  private final JwtService jwtService;
  private final UserRepository users;
  public AuthController(AuthenticationManager am, PasswordEncoder enc, JwtService jwt, UserRepository users) {
    this.authManager = am; this.encoder = enc; this.jwtService = jwt; this.users = users; }

  @PostMapping("/register")
  public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest req) {
    String email = req.getEmail().trim().toLowerCase();
    if (users.existsByEmail(email)) return ResponseEntity.status(409).body(Map.of("error","Email already in use"));
    User u = User.builder().email(email).passwordHash(encoder.encode(req.getPassword())).role(Role.ADMIN) /* change to USER for normal */.build();
    // For demo we create ADMIN so you can CRUD immediately. Switch to USER in real apps and create admins separately.
    users.save(u);
    return ResponseEntity.ok(Map.of("id", u.getId(), "email", u.getEmail(), "role", u.getRole()));
  }

  @PostMapping("/login")
  public ResponseEntity<AuthResponse> login(@Valid @RequestBody LoginRequest req) {
    Authentication auth = authManager.authenticate(new UsernamePasswordAuthenticationToken(req.getEmail().trim().toLowerCase(), req.getPassword()));
    SecurityContextHolder.getContext().setAuthentication(auth);
    User u = users.findByEmail(req.getEmail().trim().toLowerCase()).orElseThrow();
    String token = jwtService.generateToken(u.getEmail(), Map.of("uid", u.getId(), "role", u.getRole().name()));
    return ResponseEntity.ok(new AuthResponse(token));
  }
}

# ==============================
# src/main/java/com/example/employee/employee/Employee.java
# ==============================
// File: src/main/java/com/example/employee/employee/Employee.java
package com.example.employee.employee;

import jakarta.persistence.*;
import lombok.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.Instant;

@Entity
@Table(name = "employees")
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Employee {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false)
  private String firstName;

  @Column(nullable = false)
  private String lastName;

  @Column(nullable = false, unique = true)
  private String email;

  @Column(nullable = false)
  private String department;

  @Column(precision = 12, scale = 2)
  private BigDecimal salary;

  private LocalDate dateOfJoining;

  @Column(nullable = false)
  private Instant createdAt = Instant.now();

  private Instant updatedAt;

  @PreUpdate
  public void onUpdate(){ this.updatedAt = Instant.now(); }
}

# ==============================
# src/main/java/com/example/employee/employee/EmployeeRepository.java
# ==============================
// File: src/main/java/com/example/employee/employee/EmployeeRepository.java
package com.example.employee.employee;

import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
  boolean existsByEmail(String email);
}

# ==============================
# src/main/java/com/example/employee/employee/EmployeeDtos.java
# ==============================
// File: src/main/java/com/example/employee/employee/EmployeeDtos.java
package com.example.employee.employee;

import jakarta.validation.constraints.*;
import lombok.*;
import java.math.BigDecimal;
import java.time.LocalDate;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor
public class EmployeeCreateRequest {
  @NotBlank private String firstName;
  @NotBlank private String lastName;
  @Email @NotBlank private String email;
  @NotBlank private String department;
  @DecimalMin(value = "0.0", inclusive = true) private BigDecimal salary;
  @PastOrPresent private LocalDate dateOfJoining;
}

@Getter @Setter @NoArgsConstructor @AllArgsConstructor
public class EmployeeUpdateRequest {
  @NotBlank private String firstName;
  @NotBlank private String lastName;
  @NotBlank private String department;
  @DecimalMin(value = "0.0", inclusive = true) private BigDecimal salary;
  @PastOrPresent private LocalDate dateOfJoining;
}

@Getter @Setter @AllArgsConstructor
public class EmployeeResponse {
  private Long id; private String firstName; private String lastName; private String email; private String department; private BigDecimal salary; private LocalDate dateOfJoining;
}

# ==============================
# src/main/java/com/example/employee/employee/EmployeeService.java
# ==============================
// File: src/main/java/com/example/employee/employee/EmployeeService.java
package com.example.employee.employee;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class EmployeeService {
  private final EmployeeRepository repo;
  public EmployeeService(EmployeeRepository repo) { this.repo = repo; }

  @Transactional
  public Employee create(EmployeeCreateRequest req) {
    if (repo.existsByEmail(req.getEmail().trim().toLowerCase())) throw new IllegalArgumentException("Email already in use");
    Employee e = Employee.builder()
      .firstName(req.getFirstName().trim())
      .lastName(req.getLastName().trim())
      .email(req.getEmail().trim().toLowerCase())
      .department(req.getDepartment().trim())
      .salary(req.getSalary())
      .dateOfJoining(req.getDateOfJoining())
      .build();
    return repo.save(e);
  }

  public Page<Employee> list(Pageable pageable) { return repo.findAll(pageable); }

  public Employee get(Long id) { return repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Employee not found")); }

  @Transactional
  public Employee update(Long id, EmployeeUpdateRequest req) {
    Employee e = get(id);
    e.setFirstName(req.getFirstName().trim());
    e.setLastName(req.getLastName().trim());
    e.setDepartment(req.getDepartment().trim());
    e.setSalary(req.getSalary());
    e.setDateOfJoining(req.getDateOfJoining());
    return repo.save(e);
  }

  @Transactional
  public void delete(Long id) { repo.delete(get(id)); }
}

# ==============================
# src/main/java/com/example/employee/employee/EmployeeController.java
# ==============================
// File: src/main/java/com/example/employee/employee/EmployeeController.java
package com.example.employee.employee;

import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {
  private final EmployeeService service;
  public EmployeeController(EmployeeService service) { this.service = service; }

  @PreAuthorize("hasRole('ADMIN')")
  @PostMapping
  public EmployeeResponse create(@Valid @RequestBody EmployeeCreateRequest req) {
    var e = service.create(req);
    return new EmployeeResponse(e.getId(), e.getFirstName(), e.getLastName(), e.getEmail(), e.getDepartment(), e.getSalary(), e.getDateOfJoining());
  }

  @PreAuthorize("hasAnyRole('ADMIN','USER')")
  @GetMapping
  public Page<Employee> list(Pageable pageable) { return service.list(pageable); }

  @PreAuthorize("hasAnyRole('ADMIN','USER')")
  @GetMapping("/{id}")
  public Employee get(@PathVariable Long id) { return service.get(id); }

  @PreAuthorize("hasRole('ADMIN')")
  @PutMapping("/{id}")
  public EmployeeResponse update(@PathVariable Long id, @Valid @RequestBody EmployeeUpdateRequest req) {
    var e = service.update(id, req);
    return new EmployeeResponse(e.getId(), e.getFirstName(), e.getLastName(), e.getEmail(), e.getDepartment(), e.getSalary(), e.getDateOfJoining());
  }

  @PreAuthorize("hasRole('ADMIN')")
  @DeleteMapping("/{id}")
  public void delete(@PathVariable Long id) { service.delete(id); }
}

# ==============================
# src/main/java/com/example/employee/exception/GlobalExceptionHandler.java
# ==============================
// File: src/main/java/com/example/employee/exception/GlobalExceptionHandler.java
package com.example.employee.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.Map;
import java.util.stream.Collectors;

@RestControllerAdvice
public class GlobalExceptionHandler {
  @ExceptionHandler(MethodArgumentNotValidException.class)
  public ResponseEntity<?> handleValidation(MethodArgumentNotValidException ex) {
    var errors = ex.getBindingResult().getFieldErrors().stream()
      .collect(Collectors.toMap(f -> f.getField(), f -> f.getDefaultMessage(), (a,b) -> a));
    return ResponseEntity.badRequest().body(Map.of("error","Validation failed","details", errors));
  }

  @ExceptionHandler(IllegalArgumentException.class)
  public ResponseEntity<?> handleIllegal(IllegalArgumentException ex) {
    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", ex.getMessage()));
  }
}

# ==============================
# src/main/resources/data.sql (optional demo admin)
# ==============================
-- File: src/main/resources/data.sql
-- Demo admin: admin@example.com / Admin1234
INSERT INTO users (email, password_hash, role, created_at) VALUES (
  'admin@example.com',
  '$2a$10$gQHb7wV7WlUqHkq8FJ0QnuuGg3K5JYh0y0TtPq6mYQ1u8QkKf6fmi',
  'ADMIN',
  CURRENT_TIMESTAMP
);

# ==============================
# HOW TO RUN
# ==============================
# 1) Ensure Java 17+ and Maven are installed.
# 2) Set a strong Base64-able secret in application.yml (security.jwt.secret).
# 3) Build & start: mvn spring-boot:run
# 4) Open H2 console at http://localhost:8080/h2 (JDBC URL: jdbc:h2:mem:employeedb)
# 5) Use curl (below) or Postman to test.

# ==============================
# cURL EXAMPLES
# ==============================
# Login with seeded admin
# TOKEN=$(curl -s -X POST http://localhost:8080/api/auth/login \
#   -H 'Content-Type: application/json' \
#   -d '{"email":"admin@example.com","password":"Admin1234"}' | jq -r .token)

# Create employee (ADMIN only)
# curl -X POST http://localhost:8080/api/employees \
#   -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/json' \
#   -d '{
#         "firstName":"Ava","lastName":"Jones","email":"ava.jones@corp.com",
#         "department":"Finance","salary":95000,"dateOfJoining":"2023-02-15"
#       }'

# List employees (ADMIN/USER)
# curl -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/employees

# Get one (ADMIN/USER)
# curl -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/employees/1

# Update employee (ADMIN)
# curl -X PUT http://localhost:8080/api/employees/1 \
#   -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/json' \
#   -d '{
#         "firstName":"Ava","lastName":"Johnson","department":"Finance",
#         "salary":98000,"dateOfJoining":"2023-02-15"
#       }'

# Delete employee (ADMIN)
# curl -X DELETE -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/employees/1

# ==============================
# Notes for production
# ==============================
# • Replace H2 with a real DB and set proper JDBC properties.
# • Move JWT secret into an environment variable; rotate regularly.
# • Use HTTPS, enable CORS as needed, add refresh tokens + revocation strategy.
# • Add request logging/audit trails for sensitive operations.
